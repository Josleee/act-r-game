;; Painting Cheat

(add-dm
(goal isa goal state setup round nil hvalue nil hcat nil haction nil maction nil results nil)
)

(set-all-baselevels -100 10)

;; -----------------------

(p setup
    =goal>
        isa goal
        state setup
==>
    =goal>
        isa goal
        state start
    +action>
        round fill
        cat fill
        hvalue fill
        haction fill
        maction fill
)

;; ---------------------------------------------
;; Receive info from swift

(p start-even-turn-first            ;; even turn = model goes first, uneven = human goes first
    =goal>
        isa goal
        state start
    =action>
        round even
        cat =b
        hvalue =c
        haction fill
==>
    =goal>
        isa goal
        state try-retrieve-value
        hcat =b
        hvalue =c
	    round even
    +retrieval>
        isa game-experience
        hvalue	=c
)

(p start-uneven-turn
    =goal>
        isa goal
        state start
    =action>
        round uneven
        hcat =b
        hvalue =c
        haction =d      ;; - haction fill doesn't work...
==>
    =goal>
        isa goal
        state try-retrieve-value
        hcat =b
        hvalue =c
        haction =d
	    round uneven
    +retrieval>
        isa game-experience
        hvalue	=c
)

;; ---------------------------------------------
;;      Retrieving (attempts)

(p retrieve-value-success
    =goal>
	   isa goal
        state try-retrieve-value
        hvalue =c
    =retrieval>
        hvalue =c
        maction =e
==>
    =goal>
	    isa goal
        state  retrieved-whatever
        maction =e
)

(p retrieve-value-fail
    =goal>
	    isa goal
        state try-retrieve-value
        hcat =b
    ?retrieval>
        state  error
==>
    =goal>
	    isa goal
        state try-retrieve-cat
    +retrieval>
        isa game-experience
        hcat =b
)

(p retrieve-cat-success
    =goal>
	    isa goal
        state try-retrieve-cat
    =retrieval>
        hcat =b
        maction =e
==>
    =goal>
	    isa goal
        state retrieved-whatever
        maction =e
)

(p retrieve-cat-fail-uneven-turn
    =goal>
        isa goal
        state try-retrieve-cat
        round uneven
    ?retrieval>
        state error
==>
    =goal>
        isa goal
        state try-random-limited
    +action>
        haction nothing
)

(p retrieve-cat-fail-even-turn-first
    =goal>
        isa goal
        state try-retrieve-cat
        round even
    ?retrieval>
        state error
==>
    =goal>
        isa goal
        state try-random
)

;; ---------------------------------------------
;;      Do appropriate retrieved action
;;                  ---------------- Even turn (everyting is still possible)

(p retrieved-whatever-even
    =goal>
        isa goal
        state retrieved-whatever
        round even
        maction =e
==>
    =goal>
	    isa goal
        state doit
        maction =e
	+action>
		maction =e
		secondturn question
)

;;                  ---------------- Uneven turn

(p retrieved-whatever-uneven-human-raisedlow       ;; all three raises are still possible
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction =d
        maction =e
==>
    =goal>
	    isa goal
        state doit
        maction =e
	+action>
		maction =e
		secondturn question
)

;;          ---------------- Human chose raisemid

(p retrieved-whatever-uneven-human-raisedmid-retrieved-low
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction raisemid
        maction raiselow
==>
    =goal>
	    isa goal
        state doit
        maction raisemid
	+action>
		maction raisemid
		secondturn question
)

(p retrieved-whatever-uneven-human-raisedmid-retrieved-high
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction raisemid
        maction raisehigh
==>
    =goal>
	    isa goal
        state doit
        maction raisehigh
	+action>
		maction raisehigh
		secondturn question
)

;;          ---------------- Human chose raisehigh


(p retrieved-whatever-uneven-human-raisedhigh-retrieved-low
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction raisehigh
        maction raiselow
==>
    =goal>
	    isa goal
        state doit
        maction raisehigh
	+action>
		maction raisehigh
		secondturn question
)

(p retrieved-whatever-uneven-human-raisedhigh-retrieved-mid
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction raisehigh
        maction raisemid
==>
    =goal>
	    isa goal
        state doit
        maction raisehigh
	+action>
		maction raisedhigh
		secondturn question
)

;;                  ---------------- Same actions always possible

(p retrieved-whatever-uneven-human-raisedx-retrieved-x
    =goal>
        isa goal
        state retrieved-whatever
        round uneven
        haction =same
        maction =same
==>
    =goal>
	    isa goal
        state doit
        maction =same
	+action>
		maction =same
		secondturn question
)

;;                  ---------------- Folding always possible

(p retrieved-fold
    =goal>
        isa goal
        state retrieved-value
        maction fold
==>
    =goal>
	    isa goal
        state doit
        maction fold
	+action>
		maction fold
		secondturn question
)

;; ---------------------------------------------
;;      Random Actions First Turn

(p try-random-raiselow
    =goal>
        isa goal
        state try-random
==>
    =goal>
        isa goal
        state doit
        maction raiselow
    +action>
        maction raiselow
		secondturn question
)

(p try-random-raisemid
    =goal>
        isa goal
        state try-random
==>
    =goal>
        isa goal
        state doit
        maction raisemid
    +action>
        maction raisemid
		secondturn question
)

(p try-random-raisehigh
    =goal>
        isa goal
        state try-random
==>
    =goal>
        isa goal
        state doit
        maction raisehigh
    +action>
        maction raisehigh
		secondturn question
)

(p try-random-fold
    =goal>
        isa goal
        state try-random
==>
    =goal>
        isa goal
        state doit
        maction fold
    +action>
        maction fold
		secondturn question

)

;; ---------------------------------------------
;;      Switching Possible Second Turn

(p need-second-turn
	=goal>
		isa goal
		state doit
        round even
	=action>
		secondturn yes
==>
	=goal>
		isa goal
        	state secondturn
)

(p dont-need-second-turn
	=goal>
		isa goal
		state doit
	=action>
		secondturn no
==>
	=goal>
		isa goal
		state request-results
	+action>
		results question
)

;; ---------------------------------------------
;; Starting Second Turn

(p start-even-turn-second
    =goal>
        isa goal
        state secondturn
==>
    =goal>
        isa goal
        state try-random-limited
    +action>
        haction nothing
)

;; ---------------------------------------------
;;      Random Actions Limited (Second Turn)

;;                  ---------------- Options Human folded

(p try-random-limited-human-folded
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction fold
==>
    =goal>
        isa goal
        state request-results
        maction raiselow
    +action>
        maction raiselow
		secondturn no
)

;;                  ---------------- Options Human raised low

(p try-random-limited-human-raisedlow-raiselow
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raiselow
==>
    =goal>
        isa goal
        state request-results
        maction raiselow
    +action>
        maction raiselow
		secondturn no
)

(p try-random-limited-human-raisedlow-raisemid
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raiselow
==>
    =goal>
        isa goal
        state request-results
        maction raisemid
    +action>
        maction raisemid
		secondturn no
)

(p try-random-limited-human-raisedlow-raisehigh
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raiselow
==>
    =goal>
        isa goal
        state request-results
        maction raisehigh
    +action>
        maction raisehigh
		secondturn no
)

;;                  ---------------- Options Human raised mid

(p try-random-limited-human-raisedmid-model-raisemid
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raisemid
==>
    =goal>
        isa goal
        state request-results
        maction raisemid
    +action>
        maction raisemid
		secondturn no
)

(p try-random-limited-human-raisedmid-model-raisehigh
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raisemid
==>
    =goal>
        isa goal
        state request-results
        maction raisehigh
    +action>
        maction raisehigh
		secondturn no
)

;;                  ---------------- Options Human raised high

(p try-random-limited-human-raisedhigh-model-raisehigh
    =goal>
        isa goal
        state try-random-limited
	=action>
		haction raisehigh
==>
    =goal>
        isa goal
        state request-results
        maction raisehigh
    +action>
        maction raisehigh
		secondturn no
)

;;                  ---------------- Fold is always possible

(p try-random-limited-fold
    =goal>
        isa goal
        state try-random-limited
	=action>
        haction =d
==>
    =goal>
        isa goal
        state request-results
        maction fold
    +action>
        maction fold
		secondturn no
)

;; ---------------------------------------------
;;      Processing Results & Reset

(p draw
    =goal>
        isa goal
        state request-results
        hcat =b
        hvalue =c
        haction =d
        maction =e
    =action>
        results draw
==>
	=goal>
		isa goal
		state reset
	+imaginal>
		isa game-experience
		hcat =b
		hvalue =c
		maction =e
)

(p won                  ;; Can be because of human folding or model has higher painting
	=goal>
		isa goal
		state request-results
		hcat =b
		hvalue =c
		maction =e
	=action>
		results win
==>
	=goal>
		isa goal
		state reset
	+imaginal>
		isa game-experience
		hcat =b
		hvalue =c
		maction =e
)

(p lost-by-fold-unnecessarily
	=goal>
		isa goal
		state request-results
		hcat =b
		hvalue =c
		maction fold
	=action>
		results unnecessarylose
==>
	=goal>
		isa goal
		state reset
	+imaginal>
		isa game-experience
		hcat =b
		hvalue =c
		maction raiselow
)

(p lost-by-fold-fairly
	=goal>
		isa goal
		state request-results
		hcat =b
		hvalue =c
		maction fold
	=action>
		results lose
==>
	=goal>
		isa goal
		state reset
	+imaginal>
		isa game-experience
		hcat =b
		hvalue =c
		maction fold
)

(p lost-by-raise
	=goal>
		isa goal
		state request-results
		hcat =b
		hvalue =c
        - maction fold
	=action>
		results lose
==>
	=goal>
		isa goal
		state reset
	+imaginal>
		isa game-experience
		hcat =b
		hvalue =c
		maction fold
)

(p reset
	=goal>
		isa goal
		state reset
==>
	=goal>
		isa goal
		state setup
		round nil
		hvalue nil
		hcat nil
		haction nil
		maction nil
		results nil
	-action>
)

(goal-focus goal)

